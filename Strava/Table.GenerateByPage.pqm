/* The getNextPage argument is a function that takes in a single parameter, 
which will be the result of the previous call to getNextPage, 
and should return a nullable table.
page 

*/

(getNextPage as function) as table =>
    let        
        listOfPages = List.Generate(
            () => getNextPage(null),            // get the first page of data   (calling itself is null as there is no previous page.                             // inital as function
            (lastPage) => lastPage <> null,     // stop when the function returns null                          // Condition as function 
            (lastPage) => getNextPage(lastPage) // pass the previous page to the next function call             / next as function 
        ),
        // concatenate the pages together
        tableOfPages = Table.FromList(listOfPages, Splitter.SplitByNothing(), {"Column1"}),
        firstRow = tableOfPages{0}?
    in
        // if we didn't get back any pages of data, return an empty table
        // otherwise set the table type based on the columns of the first page
        if (firstRow = null) then
            Table.FromRows({})
		// check for empty first table
		else if (Table.IsEmpty(firstRow[Column1])) then
			firstRow[Column1]
        else
            Value.ReplaceType(
                Table.ExpandTableColumn(tableOfPages, "Column1", Table.ColumnNames(firstRow[Column1])),
                Value.Type(firstRow[Column1])
            )
